{"version":3,"sources":["model/PUBGRankedStats.ts","model/Core.ts","res/traningcenter.jpg","view/TeamHomepage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["PUBGTierType","PUBGSubTierType","core","teamMatch","rankedStatses","host","this","teamName","url","parse","window","location","href","query","stimestamp","etimestamp","console","log","fetch","rep","json","data","player1","player2","player3","player4","getTierName","tier","subTier","s","Unranked","Bronze","Silver","Gold","Platinum","Diamond","Elite","Master","Grandmaster","toString","I","II","III","IV","V","TeamHomepage","props","state","moment","Date","now","format","style","backgroundColor","display","flexDirection","justifyContent","padding","fontSize","alignSelf","alignItems","width","paddingTop","paddingBottom","src","TraningCenter","alt","rankedStats","m_squad","bestTier","currentTier","current","roundsPlayed","wins","kda","toFixed","kills","damageDealt","dBNOs","itemLayout","dataSource","renderItem","item","Item","Meta","avatar","playerId","size","title","playerName","currentRankPoint","description","getRankedStatsDescr","bordered","getRankedStatsDataSource","multiple","columns","dataIndex","sorter","compare","a","b","render","undefined","DBNOs","assists","timeSurvived","revives","heals","boosts","swimDistance","rideDistance","walkDistance","_","record","n","isNaN","player","statMatchData","push","key","sort","length","pagination","flexWrap","header","orientation","trainingCenter","paddingLeft","paddingRight","season","value","placeholder","maxLength","onChange","e","Number","parseInt","target","trim","setState","type","shape","icon","SearchOutlined","onClick","fetchTeamTeamMatchStats","toDate","getTime","message","error","match","React","Component","App","init","fetchTeamSeasonStats","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5ed9cf7f.chunk.js","sourcesContent":["/**\n * 赛季数据\n * @author dodo\n * @date 2020.11.23\n */\n\nexport enum PUBGTierType {\n    Unranked = \"Unranked\", // 未排名\n    Bronze = \"Bronze\", // 青铜\n    Silver = \"Silver\", // 白银\n    Gold = \"Gold\", // 黄金\n    Platinum = \"Platinum\", // 铂金\n    Diamond = \"Diamond\", // 钻石\n    Elite = \"Elite\", // 精英\n    Master = \"Master\", // 大师\n    Grandmaster = \"Grandmaster\", // 最高级别大师\n}\n\nexport enum PUBGSubTierType {\n    I = 1,\n    II = 2,\n    III = 3,\n    IV = 4,\n    V = 5,\n    NONE = 0,\n}\n\nexport function getTierName(tier: PUBGTierType, subTier: PUBGSubTierType) {\n    let s = \"\";\n    switch (tier) {\n        case PUBGTierType.Unranked:\n            s += \"无排名\";\n            return s;\n        case PUBGTierType.Bronze:\n            s += \"青铜\";\n            break;\n        case PUBGTierType.Silver:\n            s += \"白银\";\n            break;\n        case PUBGTierType.Gold:\n            s += \"黄金\";\n            break;\n        case PUBGTierType.Platinum:\n            s += \"铂金\";\n            break;\n        case PUBGTierType.Diamond:\n            s += \"钻石\";\n            break;\n        case PUBGTierType.Elite:\n            s += \"精英\";\n            break;\n        case PUBGTierType.Master:\n            s += \"大师\";\n            break;\n        case PUBGTierType.Grandmaster:\n            s += \"宗师\";\n            break;\n    }\n\n    switch (subTier.toString()) {\n        case PUBGSubTierType.I.toString():\n            s += \" I\";\n            break;\n        case PUBGSubTierType.II.toString():\n            s += \" II\";\n            break;\n        case PUBGSubTierType.III.toString():\n            s += \" III\";\n            break;\n        case PUBGSubTierType.IV.toString():\n            s += \" IV\";\n            break;\n        case PUBGSubTierType.V.toString():\n            s += \" V\";\n            break;\n    }\n    return s;\n}\n\nexport interface PUBGRankedCell {\n    currentTier: { tier: PUBGTierType; subTier: PUBGSubTierType };\n    currentRankPoint: number;\n    bestTier: { tier: PUBGTierType; subTier: PUBGSubTierType };\n    bestRankPoint: number;\n    roundsPlayed: number;\n    avgRank: number;\n    avgSurvivalTime: number;\n    top10Ratio: number;\n    winRatio: number;\n    assists: number;\n    wins: number;\n    kda: number;\n    kdr: number;\n    kills: number;\n    deaths: number;\n    roundMostKills: number;\n    longestKill: number;\n    headshotKills: number;\n    headshotKillRatio: number;\n    damageDealt: number;\n    dBNOs: number;\n    reviveRatio: number;\n    revives: number;\n    heals: number;\n    boosts: number;\n    weaponsAcquired: number;\n    teamKills: number;\n    playTime: number;\n    killStreak: number;\n}\n\nexport interface PUBGRankedStats {\n    m_squad: PUBGRankedCell;\n    playerId: string;\n    playerName: string;\n    seasonId: string;\n}\n","/**\n * 数据核心\n * @author dodo\n * @date 2020.11.23\n */\n\nimport { PUBGRankedStats } from \"./PUBGRankedStats\";\nimport TeamMatch from \"./TeamMatch\";\nimport { parse } from \"url\";\n\nexport class Core {\n    constructor() {\n        this.teamMatch = {\n            teamName: \"普陀路游击队\",\n        };\n        this.rankedStatses = [];\n        this.host = \"http://pubg.qxqplant.com:4037/\";\n    }\n\n    async init() {\n        const url = parse(window.location.href, true);\n        if (url.query[\"host\"]) {\n            this.host = url.query[\"host\"] as string;\n        }\n        if (url.query[\"teamname\"] && this.teamMatch) {\n            this.teamMatch.teamName = url.query[\"teamname\"] as string;\n        }\n    }\n\n    async fetchTeamTeamMatchStats(stimestamp: number, etimestamp: number) {\n        console.log(\"=> fetchTeamTeamMatchStats\");\n        if (this.teamMatch) {\n            const rep = await fetch(`${this.host}?cmd=match&stimestamp=${stimestamp}&etimestamp=${etimestamp}&teamname=${this.teamMatch.teamName}`);\n            const data = await rep.json();\n            this.teamMatch.player1 = data.player1;\n            this.teamMatch.player2 = data.player2;\n            this.teamMatch.player3 = data.player3;\n            this.teamMatch.player4 = data.player4;\n            console.log(this.teamMatch);\n        }\n    }\n\n    async fetchTeamSeasonStats() {\n        console.log(\"=> fetchTeamSeasonStats\");\n        if (this.teamMatch) {\n            const rep = await fetch(`${this.host}?cmd=season&teamname=${this.teamMatch.teamName}`);\n            const data = await rep.json();\n            this.rankedStatses = data;\n            console.log(this.rankedStatses);\n        }\n    }\n\n    teamMatch?: TeamMatch;\n    rankedStatses?: PUBGRankedStats[];\n    host: string;\n}\n\nconst core = new Core();\nexport default core;\n","export default __webpack_public_path__ + \"static/media/traningcenter.6df41c99.jpg\";","/**\n * 主页\n * @author dodo\n * @date 2020.11.23\n */\n\nimport { Avatar, Button, Divider, Input, List, message, Space, Table } from \"antd\";\nimport moment from \"moment\";\nimport React from \"react\";\nimport { getTierName, PUBGRankedStats } from \"../model/PUBGRankedStats\";\nimport TraningCenter from \"../res/traningcenter.jpg\";\nimport { SearchOutlined } from \"@ant-design/icons\";\nimport TeamMatch from \"../model/TeamMatch\";\nimport core from \"../model/Core\";\n\nexport interface IProp {\n    rankedStatses?: PUBGRankedStats[];\n}\n\nexport interface IState {\n    stimestamp?: string;\n    etimestamp?: string;\n    teamMatch?: TeamMatch;\n}\n\nexport default class TeamHomepage extends React.Component<IProp, IState> {\n    constructor(props: IProp) {\n        super(props);\n        this.state = {\n            stimestamp: moment(Date.now() - 7 * 60 * 1000 * 60 * 24).format(\"YYYYMMDD\"),\n            etimestamp: moment().format(\"YYYYMMDD\"),\n        };\n    }\n\n    header() {\n        return (\n            <div\n                style={{\n                    backgroundColor: \"0xffffff\",\n                    display: \"flex\",\n                    flexDirection: \"row\",\n                    justifyContent: \"center\",\n                    padding: 12,\n                }}>\n                <span\n                    style={{\n                        fontSize: 36,\n                    }}>\n                    普陀路游击队\n                </span>\n                <span\n                    style={{\n                        alignSelf: \"flex-end\",\n                    }}>\n                    ESports\n                </span>\n            </div>\n        );\n    }\n\n    trainingCenter() {\n        return (\n            <div\n                style={{\n                    display: \"flex\",\n                    flexDirection: \"column\",\n                    justifyContent: \"flex-start\",\n                    alignItems: \"center\",\n                    width: 360,\n                    paddingTop: 12,\n                    paddingBottom: 12,\n                }}>\n                <img\n                    src={TraningCenter}\n                    alt=\"训练基地\"\n                    style={{\n                        width: \"100%\",\n                    }}\n                />\n            </div>\n        );\n    }\n\n    getRankedStatsDescr(rankedStats: PUBGRankedStats) {\n        return (\n            <div>\n                {`最好排名: ${getTierName(rankedStats.m_squad.bestTier.tier, rankedStats.m_squad.bestTier.subTier)}`}\n                <br />\n                {`当前排名: ${getTierName(rankedStats.m_squad.currentTier.tier, rankedStats.m_squad.currentTier.subTier)}`}\n            </div>\n        );\n    }\n\n    getRankedStatsDataSource(rankedStats?: PUBGRankedStats) {\n        if (rankedStats) {\n            const current = rankedStats.m_squad;\n            return [\n                `游戏局数: ${current.roundsPlayed}`,\n                `吃鸡数:  ${current.wins}`,\n                `kda: ${current.kda.toFixed(3)}`,\n                `总击杀: ${current.kills}`,\n                `总伤害: ${current.damageDealt.toFixed(0)}`,\n                `总击倒: ${current.dBNOs}`,\n            ];\n        } else {\n            return [];\n        }\n    }\n\n    season() {\n        return (\n            <List\n                itemLayout=\"horizontal\"\n                dataSource={this.props.rankedStatses}\n                renderItem={(item) => (\n                    <List.Item>\n                        <List.Item.Meta\n                            avatar={<Avatar src={`http://pubg.qxqplant.com/pubg_team_assets/head/${item.playerId}.jpg`} size=\"large\" />}\n                            title={\n                                <div>\n                                    {item.playerName}\n                                    <br />\n                                    {` 当前分数: ${item.m_squad.currentRankPoint}`}\n                                </div>\n                            }\n                            description={this.getRankedStatsDescr(item)}\n                        />\n                        <div style={{ width: \"42%\" }}>\n                            <List\n                                size=\"small\"\n                                bordered\n                                dataSource={this.getRankedStatsDataSource(item)}\n                                renderItem={(item) => <List.Item>{item}</List.Item>}\n                            />\n                        </div>\n                    </List.Item>\n                )}></List>\n        );\n    }\n\n    match() {\n        let multiple = 0;\n        const columns = [\n            {\n                title: \"队员\",\n                dataIndex: \"name\",\n            },\n            {\n                title: \"击杀\",\n                dataIndex: \"kills\",\n                sorter: {\n                    compare: (a: any, b: any) => a.kills - b.kills,\n                    multiple: ++multiple,\n                },\n            },\n            {\n                title: \"总伤害\",\n                dataIndex: \"damageDealt\",\n                sorter: {\n                    compare: (a: any, b: any) => a.damageDealt - b.damageDealt,\n                    multiple: ++multiple,\n                },\n                render: (damageDealt?: number) => {\n                    if (damageDealt !== undefined) {\n                        return damageDealt.toFixed(0);\n                    } else {\n                        return undefined;\n                    }\n                },\n            },\n            {\n                title: \"总击倒\",\n                dataIndex: \"DBNOs\",\n                sorter: {\n                    compare: (a: any, b: any) => a.DBNOs - b.DBNOs,\n                    multiple: ++multiple,\n                },\n            },\n            {\n                title: \"总助攻\",\n                dataIndex: \"assists\",\n                sorter: {\n                    compare: (a: any, b: any) => a.assists - b.assists,\n                    multiple: ++multiple,\n                },\n            },\n            {\n                title: \"生存时间\",\n                dataIndex: \"timeSurvived\",\n                sorter: {\n                    compare: (a: any, b: any) => a.timeSurvived - b.timeSurvived,\n                    multiple: ++multiple,\n                },\n                render: (timeSurvived?: number) => {\n                    if (timeSurvived !== undefined) {\n                        return (timeSurvived / 60).toFixed(2) + \" 分钟\";\n                    } else {\n                        return undefined;\n                    }\n                },\n            },\n            {\n                title: \"复活\",\n                dataIndex: \"revives\",\n                sorter: {\n                    compare: (a: any, b: any) => a.revives - b.revives,\n                    multiple: ++multiple,\n                },\n            },\n            {\n                title: \"药包用量\",\n                dataIndex: \"heals\",\n                sorter: {\n                    compare: (a: any, b: any) => a.heals - b.heals,\n                    multiple: ++multiple,\n                },\n            },\n            {\n                title: \"罐头加速\",\n                dataIndex: \"boosts\",\n                sorter: {\n                    compare: (a: any, b: any) => a.boosts - b.boosts,\n                    multiple: ++multiple,\n                },\n            },\n            {\n                title: \"移动距离\",\n                sorter: {\n                    compare: (a: any, b: any) => {\n                        return a.swimDistance + a.rideDistance + a.walkDistance - (b.swimDistance + b.rideDistance + b.walkDistance);\n                    },\n                    multiple: ++multiple,\n                },\n                render: (_: any, record: any) => {\n                    if (record !== undefined) {\n                        const n = (record.swimDistance + record.rideDistance + record.walkDistance).toFixed(0);\n                        if (isNaN(n)) {\n                            return undefined;\n                        } else {\n                            return n + \" 米\";\n                        }\n                    } else {\n                        return undefined;\n                    }\n                },\n            },\n        ];\n\n        let data: any[] = [];\n        if (this.state.teamMatch) {\n            const teamMatch = this.state.teamMatch;\n            if (teamMatch.player1) {\n                const player = teamMatch.player1;\n                if (player.statMatchData) {\n                    data.push({\n                        key: player.playerId,\n                        playerName: player.playerName,\n                        ...player.statMatchData,\n                    });\n                }\n            }\n            if (teamMatch.player2) {\n                const player = teamMatch.player2;\n                if (player.statMatchData) {\n                    data.push({\n                        key: player.playerId,\n                        playerName: player.playerName,\n                        ...player.statMatchData,\n                    });\n                }\n            }\n            if (teamMatch.player3) {\n                const player = teamMatch.player3;\n                if (player.statMatchData) {\n                    data.push({\n                        key: player.playerId,\n                        playerName: player.playerName,\n                        ...player.statMatchData,\n                    });\n                }\n            }\n            if (teamMatch.player4) {\n                const player = teamMatch.player4;\n                if (player.statMatchData) {\n                    data.push({\n                        key: player.playerId,\n                        playerName: player.playerName,\n                        ...player.statMatchData,\n                    });\n                }\n            }\n        }\n        data = data.sort((a, b) => {\n            return b.kills - a.kills;\n        });\n\n        if (data.length === 0) {\n            data = [];\n        }\n\n        return <Table columns={columns} dataSource={data} pagination={false} />;\n    }\n\n    render() {\n        return (\n            <div style={{ display: \"flex\", flexDirection: \"column\", flexWrap: \"nowrap\", justifyContent: \"flex-start\", alignItems: \"center\" }}>\n                {this.header()}\n                <Divider orientation=\"center\">训练基地</Divider>\n                {this.trainingCenter()}\n                <Divider orientation=\"center\">PUBG 当前赛季数据</Divider>\n                <div\n                    style={{\n                        width: \"100%\",\n                        paddingLeft: 8,\n                        paddingRight: 4,\n                    }}>\n                    {this.season()}\n                </div>\n                <Divider orientation=\"center\">近期比赛查询</Divider>\n                <div\n                    style={{\n                        paddingLeft: 12,\n                        paddingRight: 12,\n                    }}>\n                    <Space\n                        style={{\n                            paddingBottom: 20,\n                        }}>\n                        <Input\n                            value={this.state.stimestamp}\n                            placeholder=\"开始时间(20201111)\"\n                            maxLength={8}\n                            onChange={(e) => {\n                                const n = Number.parseInt(e.target.value ? e.target.value.trim() : \"\");\n                                this.setState({\n                                    stimestamp: isNaN(n) ? this.state.stimestamp : n.toString(),\n                                });\n                            }}\n                        />\n                        <Input\n                            value={this.state.etimestamp}\n                            placeholder=\"结束时间(20201111)\"\n                            maxLength={8}\n                            onChange={(e) => {\n                                const n = Number.parseInt(e.target.value ? e.target.value.trim() : \"\");\n                                this.setState({\n                                    etimestamp: isNaN(n) ? this.state.stimestamp : n.toString(),\n                                });\n                            }}\n                        />\n                        <Button\n                            type=\"primary\"\n                            shape=\"circle\"\n                            icon={<SearchOutlined />}\n                            onClick={async () => {\n                                const { stimestamp, etimestamp } = this.state;\n                                const format = \"YYYYMMDD\";\n                                if (stimestamp && etimestamp) {\n                                    await core.fetchTeamTeamMatchStats(\n                                        moment(stimestamp.toString(), format).toDate().getTime(),\n                                        moment(etimestamp.toString(), format).toDate().getTime() + 60 * 1000 * 60 * 24\n                                    );\n                                    if (core.teamMatch) {\n                                        this.setState({\n                                            teamMatch: { ...core.teamMatch },\n                                        });\n                                    }\n                                } else {\n                                    message.error(\"日期格式错误(20201111)\");\n                                }\n                            }}\n                        />\n                    </Space>\n                </div>\n                <div\n                    style={{\n                        width: \"100%\",\n                        paddingLeft: 8,\n                        paddingRight: 4,\n                    }}>\n                    {this.match()}\n                </div>\n                <Divider />\n                {`©COPYRIGHT 普陀路游击队 ESports ${moment().format(\"YYYY\")}. ALL RIGHTS RESERVED`}\n            </div>\n        );\n    }\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport core from \"./model/Core\";\nimport { PUBGRankedStats } from \"./model/PUBGRankedStats\";\nimport TeamMatch from \"./model/TeamMatch\";\nimport TeamHomepage from \"./view/TeamHomepage\";\n\ninterface IState {\n    teamMatch?: TeamMatch;\n    rankedStatses?: PUBGRankedStats[];\n}\n\nexport default class App extends React.Component<any, IState> {\n    constructor(props: any) {\n        super(props);\n        this.state = {};\n    }\n\n    async componentDidMount() {\n        await core.init();\n        await core.fetchTeamSeasonStats();\n\n        if (core.rankedStatses) {\n            this.setState({\n                rankedStatses: core.rankedStatses.sort((a, b) => {\n                    return b.m_squad.currentRankPoint - a.m_squad.currentRankPoint;\n                }),\n            });\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <TeamHomepage rankedStatses={this.state.rankedStatses}/>\n            </div>\n        );\n    }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}